<Page x:Class="SilkDialectLearning.Views.SceneView"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:local="clr-namespace:SilkDialectLearning"
			 xmlns:converters="clr-namespace:SilkDialectLearning.Converters"
			 mc:Ignorable="d"
			 d:DesignHeight="600" d:DesignWidth="800"
			 Loaded="UserControl_Loaded" 
			 d:DataContext="{d:DesignInstance local:MainViewModel}">

	<Page.Resources>
		<converters:ByteToImageConveter x:Key="ByteToImageConverter"/>
		<converters:PositionToMarginConverter x:Key="PostionToMarginConverter"/>
		<converters:SizeToWidthConverter x:Key="SizeToWidthConverter"/>
		<converters:SizeToHeightConverter x:Key="SizeToHeightConverter"/>
		<converters:BooleanToRadiusConverter x:Key="BooleanToRadiusConverter"/>
		<converters:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
		<converters:PracticeActivityToVisibilityConverter x:Key="PracticeActivityToVisibilityConverter"/>
	</Page.Resources>
	<Grid>
		<Grid.Resources>
			<Style TargetType="Border" x:Key="SceneBorderStyle">
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="True">
						<Setter Property="Background" Value="{DynamicResource HighlightBrush}"/>
						<Setter Property="Opacity" Value=".5"/>
						<Setter Property="BorderThickness" Value="1"/>
						<Setter Property="BorderBrush" Value="{DynamicResource GrayBrush1}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Background" Value="{DynamicResource GrayBrush2}"/>
						<Setter Property="BorderThickness" Value="0"/>
						<Setter Property="Opacity" Value=".8"/>
					</Trigger>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Cursor" Value="Hand"/>
					</Trigger>
				</Style.Triggers>
			</Style>
		</Grid.Resources>
		<TabControl Name="ScenesTabControl"
							ItemsSource="{Binding Path=ViewModel.SceneViewModel.Scenes}" 
							SelectionChanged="TabControl_SelectionChanged"
							SelectedItem="{Binding Path=ViewModel.SceneViewModel.SelectedEntity}"
							Loaded="ScenesTabControl_Loaded">
			<TabControl.ItemTemplate>
				<DataTemplate>
					<StackPanel Orientation="Horizontal">
						<TextBlock HorizontalAlignment="Left" Text="{Binding Path=Name}" ToolTip="{Binding Path=Description}"/>
					</StackPanel>
				</DataTemplate>
			</TabControl.ItemTemplate>

			<TabControl.ContentTemplate>
				<DataTemplate>
					<Grid Name="mainGrid">
						<Image Name="sceneImage" Source="{Binding Path=ScenePicture.Picture, Converter={StaticResource ByteToImageConverter}}">
							<Image.Style>
								<Style TargetType="Image">
									<Style.Triggers>
										<DataTrigger Binding="{Binding ElementName=items, Path=ItemsSource}" Value="{x:Null}">
											<Setter  Property="Visibility" Value="Hidden"></Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Image.Style>
						</Image>
						
						<Grid Name="bordersGrid" Width="{Binding ActualWidth, ElementName=sceneImage, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=sceneImage, Mode=OneWay}">
							<ItemsControl ItemsSource="{Binding Path=SceneItems, IsAsync=True}" Name="items" VirtualizingPanel.IsVirtualizing="True">
								<ItemsControl.Style>
									<Style TargetType="{x:Type ItemsControl}">
										<Style.Triggers>
											<Trigger Property="ItemsSource" Value="{x:Null}">
												<Setter Property="Template" Value="{StaticResource WaitControlTemplate}" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</ItemsControl.Style>
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<Grid/>
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<Border MouseLeftButtonDown="dot_MouseLeftButtonDown" 
														HorizontalAlignment="Left"
														VerticalAlignment="Top"
														Loaded="Border_Loaded" 
														Name="sceneDot"
														IsEnabled="{Binding Path=Phrase, Converter={StaticResource NullToBooleanConverter}}" 
														Style="{StaticResource SceneBorderStyle}">
											<Border.CornerRadius>
												<Binding Path="IsRound" Converter="{StaticResource BooleanToRadiusConverter}"/>
											</Border.CornerRadius>
											<Border.Height>
												<MultiBinding Converter="{StaticResource SizeToHeightConverter}">
													<Binding Path="Size"/>
													<Binding ElementName="sceneImage" Path="ActualHeight"/>
												</MultiBinding>
											</Border.Height>
											<Border.Width>
												<MultiBinding Converter="{StaticResource SizeToWidthConverter}">
													<Binding Path="Size"/>
													<Binding ElementName="sceneImage" Path="ActualHeight"/>
												</MultiBinding>
											</Border.Width>
											<Border.Margin>
												<MultiBinding Converter="{StaticResource PostionToMarginConverter}">
													<Binding Path="XPos"/>
													<Binding Path="YPos"/>
													<Binding Path="Width" ElementName="sceneDot"/>
													<Binding Path="Height" ElementName="sceneDot"/>
													<Binding ElementName="sceneImage" Path="ActualWidth"/>
													<Binding ElementName="sceneImage" Path="ActualHeight"/>
												</MultiBinding>
											</Border.Margin>
										</Border>
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
						</Grid>
						<Button HorizontalAlignment="Right" Margin="10" 
								VerticalAlignment="Bottom" 
								Loaded="Button_Loaded" 
								Width="55" 
								Height="55" 
								Command="{Binding Path=RepeatCommand}"
								Style="{DynamicResource MetroCircleButtonStyle}"
								Visibility="{Binding Path=ViewModel.SceneViewModel.ViewModelActivity, Converter={StaticResource PracticeActivityToVisibilityConverter}}">
							<Rectangle Width="25" Height="25" 
									   Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
								<Rectangle.OpacityMask>
									<VisualBrush Stretch="Fill"
									 Visual="{DynamicResource appbar_transform_rotate_counterclockwise}" />
								</Rectangle.OpacityMask>
							</Rectangle>
						</Button>
					</Grid>
				</DataTemplate>
			</TabControl.ContentTemplate>
		</TabControl>
	</Grid>
</Page>
